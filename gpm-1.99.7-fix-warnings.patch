--- gpm-1.99.7/src/drivers/empty/i.c.omv~	2015-07-27 23:58:58.613239358 +0200
+++ gpm-1.99.7/src/drivers/empty/i.c	2015-07-27 23:59:38.045248717 +0200
@@ -23,7 +23,7 @@
 #include "types.h"              /* Gpm_type */
 #include "mice.h"               /* check_no_argv */
 
-Gpm_Type *I_empty(int fd, unsigned short flags, struct Gpm_Type *type, int argc,
+Gpm_Type *I_empty(int __attribute__((unused)) fd, unsigned short __attribute__((unused)) flags, struct Gpm_Type *type, int argc,
                   char **argv)
 {
    /*
--- gpm-1.99.7/src/drivers/etouch/i.c.omv~	2015-07-28 00:00:04.550255008 +0200
+++ gpm-1.99.7/src/drivers/etouch/i.c	2015-07-28 00:00:14.278257316 +0200
@@ -31,7 +31,7 @@
 extern int gunze_calib[4];      /* FIXME: do not depend on other drivers! */
 
 /* simple initialization for the elo touchscreen */
-Gpm_Type *I_etouch(int fd, unsigned short flags, struct Gpm_Type *type,
+Gpm_Type *I_etouch(int fd, unsigned short __attribute__((unused)) flags, struct Gpm_Type *type,
                    int argc, char **argv)
 {
    struct termios tty;
--- gpm-1.99.7/src/drivers/exps2/i.c.omv~	2015-07-28 00:00:35.902262449 +0200
+++ gpm-1.99.7/src/drivers/exps2/i.c	2015-07-28 00:00:44.406264467 +0200
@@ -32,7 +32,7 @@
  * This works with Dexxa Optical Mouse, but because in X same initstring
  * is named ExplorerPS/2 so I named it in the same way.
  */
-Gpm_Type *I_exps2(int fd, unsigned short flags, struct Gpm_Type *type, int argc,
+Gpm_Type *I_exps2(int fd, unsigned short __attribute__((unused)) flags, struct Gpm_Type *type, int argc,
                   char **argv)
 {
    static unsigned char s1[] = { 243, 200, 243, 200, 243, 80, };
--- gpm-1.99.7/src/drivers/gunze/i.c.omv~	2015-07-28 00:01:00.417268267 +0200
+++ gpm-1.99.7/src/drivers/gunze/i.c	2015-07-28 00:01:09.050270316 +0200
@@ -34,7 +34,7 @@ extern int gunze_calib[4];
 extern int gunze_debounce;
 
 /* simple initialization for the gunze touchscreen */
-Gpm_Type *I_gunze(int fd, unsigned short flags, struct Gpm_Type *type, int argc,
+Gpm_Type *I_gunze(int fd, unsigned short __attribute__((unused)) flags, struct Gpm_Type *type, int argc,
                   char **argv)
 {
    struct termios tty;
--- gpm-1.99.7/src/drivers/imps2/i.c.omv~	2015-07-28 00:01:20.610273060 +0200
+++ gpm-1.99.7/src/drivers/imps2/i.c	2015-07-28 00:02:03.805283312 +0200
@@ -31,8 +31,8 @@
 /* intellimouse, ps2 version: Ben Pfaff and Colin Plumb */
 
 /* Autodetect: Steve Bennett */
-Gpm_Type *I_imps2(int fd, unsigned short flags, struct Gpm_Type *type, int argc,
-                  char **argv)
+Gpm_Type *I_imps2(int fd, unsigned short __attribute__((unused)) flags, struct Gpm_Type *type, int argc,
+                  char __attribute__((unused)) **argv)
 {
    int id;
    static unsigned char basic_init[] =
--- gpm-1.99.7/src/drivers/msc/r.c.omv~	2015-07-28 00:02:16.512286328 +0200
+++ gpm-1.99.7/src/drivers/msc/r.c	2015-07-28 00:03:52.960309219 +0200
@@ -36,9 +36,9 @@ int R_msc(Gpm_Event * state, int fd)
     */
    buffer[0] = (state->buttons ^ 0x07) | 0x80;
    dx = limit_delta(state->dx, -256, 254);
-   buffer[3] = state->dx - (buffer[1] = state->dx / 2); /* Markus */
+   buffer[3] = dx - (buffer[1] = dx / 2); /* Markus */
    dy = limit_delta(state->dy, -256, 254);
-   buffer[4] = -state->dy - (buffer[2] = -state->dy / 2);
+   buffer[4] = -dy - (buffer[2] = -dy / 2);
    return write(fd, buffer, 5);
 
 }
--- gpm-1.99.7/src/drivers/mtouch/i.c.omv~	2015-07-28 00:04:11.438313604 +0200
+++ gpm-1.99.7/src/drivers/mtouch/i.c	2015-07-28 00:04:30.432318112 +0200
@@ -27,8 +27,8 @@
 
 #include "types.h"              /* Gpm_type */
 
-Gpm_Type *I_mtouch(int fd, unsigned short flags, struct Gpm_Type *type,
-                   int argc, char **argv)
+Gpm_Type *I_mtouch(int fd, unsigned short __attribute__((unused)) flags, struct Gpm_Type *type,
+                   int argc, char __attribute__((unused)) **argv)
 {
    struct termios tty;
 
--- gpm-1.99.7/src/drivers/netmouse/i.c.omv~	2015-07-28 00:04:40.477320496 +0200
+++ gpm-1.99.7/src/drivers/netmouse/i.c	2015-07-28 00:04:51.049323005 +0200
@@ -26,7 +26,7 @@
 #include "mice.h"               /* check_no_argv */
 #include "message.h"            /* gpm_report */
 
-Gpm_Type *I_netmouse(int fd, unsigned short flags, struct Gpm_Type *type,
+Gpm_Type *I_netmouse(int fd, unsigned short __attribute__((unused)) flags, struct Gpm_Type *type,
                      int argc, char **argv)
 {
    unsigned char magic[6] = { 0xe8, 0x03, 0xe6, 0xe6, 0xe6, 0xe9 };
--- gpm-1.99.7/src/drivers/ps2/i.c.omv~	2015-07-28 00:06:04.843340520 +0200
+++ gpm-1.99.7/src/drivers/ps2/i.c	2015-07-28 00:06:18.662343800 +0200
@@ -26,8 +26,8 @@
 #include "types.h"              /* Gpm_type */
 
 /* standard ps2 */
-Gpm_Type *I_ps2(int fd, unsigned short flags, struct Gpm_Type *type, int argc,
-                char **argv)
+Gpm_Type *I_ps2(int fd, unsigned short __attribute__((unused)) flags, struct Gpm_Type *type, int argc,
+                char __attribute__((unused)) **argv)
 {
    static unsigned char s[] = { 246, 230, 244, 243, 100, 232, 3, };
 
--- gpm-1.99.7/src/drivers/summa/i.c.omv~	2015-07-28 00:06:36.683348077 +0200
+++ gpm-1.99.7/src/drivers/summa/i.c	2015-07-28 00:06:51.952351701 +0200
@@ -36,8 +36,8 @@ extern int summamaxy;
 
 extern signed char summaid;
 
-Gpm_Type *I_summa(int fd, unsigned short flags, struct Gpm_Type *type, int argc,
-                  char **argv)
+Gpm_Type *I_summa(int fd, unsigned short __attribute__((unused)) flags, struct Gpm_Type *type, int argc,
+                  char __attribute__((unused)) **argv)
 {
 
    flags = argc = 0;            /* FIXME: 1.99.13 */
--- gpm-1.99.7/src/drivers/synaptics/synaptics.c.omv~	2015-07-28 00:07:06.585355174 +0200
+++ gpm-1.99.7/src/drivers/synaptics/synaptics.c	2015-07-28 00:07:17.254357706 +0200
@@ -1672,7 +1672,7 @@ static int syn_ps2_process_extended_pack
 **
 */
 
-static int tp_find_fingers(report_type * report, Gpm_Event * state)
+static int tp_find_fingers(report_type * report, Gpm_Event __attribute__((unused)) * state)
 {
 
    static int fake_extra_finger;
--- gpm-1.99.7/src/drivers/synps2/i.c.omv~	2015-07-28 00:07:30.107360756 +0200
+++ gpm-1.99.7/src/drivers/synps2/i.c	2015-07-28 00:07:45.764364472 +0200
@@ -24,8 +24,8 @@
 #include "synaptics.h"          /* Gpm_type */
 
 /* synaptics touchpad, ps2 version: Henry Davies */
-Gpm_Type *I_synps2(int fd, unsigned short flags, struct Gpm_Type *type,
-                   int argc, char **argv)
+Gpm_Type *I_synps2(int fd, __attribute__((unused)) unsigned short flags, struct Gpm_Type *type,
+                   int argc, __attribute__((unused)) char **argv)
 {
 
    flags = argc = 0;            /* FIXME: 1.99.13 */
--- gpm-1.99.7/src/drivers/twid/twiddler.c.omv~	2015-07-28 00:07:59.289367683 +0200
+++ gpm-1.99.7/src/drivers/twid/twiddler.c	2015-07-28 00:10:12.448399287 +0200
@@ -274,8 +274,6 @@ int twiddler_key(unsigned long message)
 {
    char **table = twiddler_get_table(message);
 
-   char *val;
-
    /*
     * These two are needed to avoid transmitting single keys when typing
     * chords. When the number of keys being held down decreases, data
@@ -299,7 +297,6 @@ int twiddler_key(unsigned long message)
    if(!table)
       return 0;
    message &= 0xff;
-   val = table[message];
 
    if((message < last_message) && !marked) {    /* ok, do it */
       marked++;                 /* don't retransmit on release */
@@ -500,7 +497,7 @@ char *twiddler_rest_to_value(char *s)
       return strdup(buf);
    }
    if(*ptr == '\\')
-      return (char *) twiddler_escape_sequence(ptr + 1, &len /* unused */ );
+      return (char *) (unsigned long) twiddler_escape_sequence(ptr + 1, &len /* unused */ );
 
    if(strlen(ptr) == 1)
       return ((char *) ((unsigned long) *ptr & 0xFF));
--- gpm-1.99.7/src/drivers/wacom/i.c.omv~	2015-07-28 00:10:23.914402008 +0200
+++ gpm-1.99.7/src/drivers/wacom/i.c	2015-07-28 00:10:31.550403820 +0200
@@ -30,7 +30,7 @@
 #include "message.h"            /* gpm_report */
 #include "wacom.h"              /* wacom */
 
-Gpm_Type *I_wacom(int fd, unsigned short flags, struct Gpm_Type *type, int argc,
+Gpm_Type *I_wacom(int fd, unsigned short __attribute__((unused)) flags, struct Gpm_Type *type, int argc,
                   char **argv)
 {
 
--- gpm-1.99.7/src/drivers/wp/i.c.omv~	2015-07-28 00:10:45.187407057 +0200
+++ gpm-1.99.7/src/drivers/wp/i.c	2015-07-28 00:11:01.394410903 +0200
@@ -30,8 +30,8 @@ extern int wizardpad_width;
 extern int wizardpad_height;
 
 /*  Genius Wizardpad tablet  --  Matt Kimball (mkimball@xmission.com)  */
-Gpm_Type *I_wp(int fd, unsigned short flags, struct Gpm_Type *type, int argc,
-               char **argv)
+Gpm_Type *I_wp(int fd, unsigned short __attribute__((unused)) flags, struct Gpm_Type *type, int argc,
+               char __attribute__((unused)) **argv)
 {
    struct termios tty;
 
--- gpm-1.99.7/src/lib/libhigh.c.omv~	2015-07-28 00:11:17.865414813 +0200
+++ gpm-1.99.7/src/lib/libhigh.c	2015-07-28 00:11:26.888416954 +0200
@@ -168,7 +168,7 @@ Gpm_Roi *Gpm_LowerRoi(Gpm_Roi * which, G
  * It generates also GPM_ENTER and GPM_LEAVE events.
  */
 
-int Gpm_HandleRoi(Gpm_Event * ePtr, void *clientdata)
+int Gpm_HandleRoi(Gpm_Event * ePtr, void __attribute__((unused)) *clientdata)
 {
    static Gpm_Event backEvent;
 
